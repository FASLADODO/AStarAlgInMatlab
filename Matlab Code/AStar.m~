function [pathBackwards] = AStar(OccupancyMap, GoalLocation, RobotLocation)
Open = [];
Closed = [];
[rows, cols] = size(OccupancyMap);
pathBackwards = [];
% closed array gets all the 1's
% closed array format is x y parentx parenty
% NOTE: Formatting array instead of building object or researching Matlab
% farther, but should update in with proper programming in future
closedCounter = 1;
openCounter = 1;
% for i=1:rows
%     for j=1:cols
%         if(OccupancyMap(i,j) == 1)
%             Closed(closedCounter,1)=i;
%             Closed(closedCounter,2)=j;
%             Closed(closedCounter,3)=-1;
%             Closed(closedCounter,4)=-1;
%             Closed(closedCounter,5)=-1;
%             closedCounter=closedCounter+1;
%         end
%     end
% end

heuristic = h(RobotLocation(1), RobotLocation(2), GoalLocation(1), GoalLocation(2));
% open array format is [x,y,parentx,parenty,f,g]
Open(openCounter,1) = RobotLocation(1);
Open(openCounter,2) = RobotLocation(2);
Open(openCounter,3) = RobotLocation(1);
Open(openCounter,4) = RobotLocation(2);
Open(openCounter,5) = heuristic;
Open(openCounter,6) = 0;
openCounter = openCounter + 1;
[rowSizeOpen, colSizeOpen] = size(Open);
while(rowSizeOpen > 0)
    f = 10000;
    temp = [];
    removeIndex = -1;
    arrived = false;
    disp(rowSizeOpen);
    [rowSizeOpen, colSizeOpen] = size(Open);
    for ridx=1:rowSizeOpen
        if Open(ridx,5) < f
            f = Open(ridx,5);
            temp = Open(ridx,1:6);
            removeIndex = ridx;
        end
    end
    Open(removeIndex,:) = [];
    openCounter = openCounter -1;
    % successors format is 1:[x,y,parentx,parenty,f,g]...
    successors = getSuccessors(temp(1), temp(2), temp(6), GoalLocation);
    for successorRow=1:8
        if(OccupancyMap(successors(successorRow,1),successors(successorRow,2)) == 1)
            continue;
        end
        if (successors(successorRow,1) == GoalLocation(1))&&(successors(successorRow,2)==GoalLocation(2))
            % must traverse through parents and build return array
            pathCount = 1;
            pathBackwards(pathCount, 1) = GoalLocation(1);
            pathBackwards(pathCount, 1) = GoalLocation(2);
            pathCount = pathCount+1;
            pathBackwards(pathCount, 1) = temp(1);
            pathBackwards(pathCount, 1) = temp(2);
            currX = temp(3);
            currY = temp(4);
            [rowSizeClosed, colSizeClosed] = size(Closed);
            while(~(currX==RobotLocation(1) && currY==RobotLocation(2)))
                for fi=1:rowSizeClosed
                    if (currX==Closed(fi,1)&&(currY==Closed(fi,2)
                        
                    end
            end
            arrived = true;
            disp("meow");
            break;
        end
        
        % computed new f and new g are in 5 and 6 respectively
        % if position in open and smaller f, skip
        [rowSizeOpen, colSizeOpen] = size(Open);
        sameWithLessF = false;
        for rowindex=1:rowSizeOpen
            if (Open(rowindex,1)==successors(successorRow,1)) && (Open(rowindex,2)==successors(successorRow,2))&& (Open(rowindex,5)<=successors(successorRow,5))
                sameWithLessF = true;
                break;
            end
        end
        if sameWithLessF == true
           continue; 
        end
        
        % if same with less f in closed, skip (skips walls and obstacles :)
        [rowSizeClosed, colSizeClosed] = size(Closed);
        for rowClosedIndex=1:rowSizeClosed
            if (Closed(rowClosedIndex,1)==successors(successorRow,1)) && (Closed(rowClosedIndex,2)==successors(successorRow,2))&& (Closed(rowClosedIndex,5)<=successors(successorRow,5))
                sameWithLessF = true;
                break;
            end
        end
        if sameWithLessF == true
           continue; 
        end
        
        % if we have survived to this line of code then add node to open
        Open(openCounter,1) = successors(successorRow,1);
        Open(openCounter,2) = successors(successorRow,2);
        Open(openCounter,3) = successors(successorRow,3);
        Open(openCounter,4) = successors(successorRow,4);
        Open(openCounter,5) = successors(successorRow,5);
        Open(openCounter,6) = successors(successorRow,6);
        openCounter = openCounter + 1;
    end
    if arrived == true
        break;
    end
    Closed(closedCounter,1)=temp(1);
    Closed(closedCounter,2)=temp(2);
    Closed(closedCounter,3)=temp(3);
    Closed(closedCounter,4)=temp(4);
    Closed(closedCounter,5)=temp(5);
    closedCounter=closedCounter+1;
    [rowSizeOpen, colSizeOpen] = size(Open);
end
